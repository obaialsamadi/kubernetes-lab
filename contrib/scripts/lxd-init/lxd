#! /usr/bin/env bash
set -o errtrace
set -o functrace
set -o errexit
set -o nounset
set -o pipefail
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
###### functions ########
function string_contains() {
  local -r haystack="$1"
  local -r needle="$2"
  [[ "$haystack" == *"$needle"* ]]
}
function string_multiline_contains() {
  local -r haystack="$1"
  local -r needle="$2"
  echo "$haystack" | grep -q "$needle"
}
function string_to_uppercase() {
  local -r str="$1"
  echo "$str" | awk '{print toupper($0)}'
}
function string_strip_prefix() {
  local -r str="$1"
  local -r prefix="$2"
  echo "${str#$prefix}"
}
function string_strip_suffix() {
  local -r str="$1"
  local -r suffix="$2"
  echo "${str%$suffix}"
}
function string_is_empty_or_null() {
  local -r response="$1"
  [[ -z "$response" || "$response" == "null" ]]
}
function string_colorify() {
  local -r color_code="$1"
  local -r input="$2"
  echo -e "\e[1m\e[$color_code"m"$input\e[0m"
}
function string_blue() {
  local -r color_code="34"
  local -r input="$1"
  echo -e "$(string_colorify "${color_code}" "${input}")"
}
function string_yellow() {
  local -r color_code="93"
  local -r input="$1"
  echo -e "$(string_colorify "${color_code}" "${input}")"
}
function string_green() {
  local -r color_code="32"
  local -r input="$1"
  echo -e "$(string_colorify "${color_code}" "${input}")"
}
function string_red() {
  local -r color_code="31"
  local -r input="$1"
  echo -e "$(string_colorify "${color_code}" "${input}")"
}
function assert_not_empty() {
  local -r arg_name="$1"
  local -r arg_value="$2"
  local -r reason="$3"
  if [[ -z "$arg_value" ]]; then
    log_error "'$arg_name' cannot be empty. $reason"
    exit 1
  fi
}
function log() {
    local -r level="$1"
    local -r message="$2"
    local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    local -r script_name="$(basename "$0")"
    local color
    case "$level" in
    INFO)
        color="string_green"
        ;;
    WARN)
        color="string_yellow"
        ;;
    ERROR)
        color="string_red"
        ;;
    esac
    echo >&2 -e "$(${color} "${timestamp} [${level}] ==>") $(string_blue "[$script_name]") ${message}"
}
function log_info() {
    local -r message="$1"
    log "INFO" "$message"
}
function log_warn() {
    local -r message="$1"
    log "WARN" "$message"
}
function log_error() {
    local -r message="$1"
    log "ERROR" "$message"
}
function ifup {
    typeset output
    output=$(ip link show "$1" ) && [[ -n $output ]]
}
###### execution  ########
log_info "installing packages"
sudo snap refresh
sudo snap install core 
sudo snap refresh
sudo snap install lxd 
log_info "ensure '$USER' belongs to lxd group"
getent group lxd > /dev/null || sudo groupadd lxd
sudo usermod --append --groups lxd "$USER"

if ifup lxdbr0; then
  log_warn "'lxdbr0' exists. removing ..."
  sudo ip link set lxdbr0 down
  sudo ip link delete lxdbr0 type bridge
fi


interfaces=($(ip link | awk -F: '$0 !~ "lo|vir|wl|lxd|docker|^[^0-9]"{print $2;getline}'))
log_info "initializing lxd on interface ${interfaces[0]}"
cat <<EOF | sudo lxd init --preseed
config: {}
networks:
- config:
    ipv4.address: auto
    ipv6.address: auto
  description: ""
  name: lxdbr0
  type: ""
storage_pools:
- config:
    size: 30GB
  description: ""
  name: default
  driver: btrfs
profiles:
- config: {}
  description: ""
  devices:
    ${interfaces[0]}:
      name: ${interfaces[0]}
      network: lxdbr0
      type: nic
    root:
      path: /
      pool: default
      type: disk
  name: default
cluster: null
EOF
log_info "ensuring lxd is running without any issuesi by logging in 'lxd' group and launching a new image"
newgrp lxd <<EOF
lxc launch images:debian/buster test && \
lxc exec test -- apt update  && \
lxc delete test --force
EOF

